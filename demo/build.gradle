plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'mysql:mysql-connector-java'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
	implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.7.6'
	
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
	implementation 'org.springframework.boot:spring-boot-starter-security'

}

//tasks.named('test') {
//	useJUnitPlatform()
//}

task('release') {
	// ./gradlew build 먼저 실행하라는 뜻
	dependsOn("build")

	doLast {
		def stdout = new ByteArrayOutputStream()
		// exec - 커맨드 라인 프로세서; 파워쉘/터미널에서 실행하는 것과 같다.
		exec {
			// eb setenv SPRING_PROFILES_ACTIVE=prod
			commandLine 'eb', 'setenv', 'SPRING_PROFILES_ACTIVE=prod'
			standardOutput = stdout
		}
		// 결과 로깅을 위한 작업
		println "eb setenv SPRING_PROFILES_ACTIVE=prod: \n$stdout"
		exec {
			// eb deploy
			commandLine 'eb', 'deploy'
			standardOutput = stdout
		}
		println "eb deploy: \n$stdout"
		println "Release succeeded."
	}
}